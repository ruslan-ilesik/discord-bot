import asyncio
from operator import pos
from os import path
import re
import discord
from discord.embeds import Embed
from discord.ext import commands
from discord.utils import get
from discord import Colour
from discord_components import DiscordComponents, Button, ButtonStyle
from discord_components import component
from discord_components.component import Component
import requests
import json
import random
import time
import html
import tic_tac_toe as ttt
import chess as ch
from PIL import Image, ImageDraw
import io

from __main__ import bot, use_shop
import some_stuff as stuff
import data_base.work_with_db as db

avaible = True
#_______________everyone commands___________________________
@bot.command(pass_context= True) 
async def help(ctx,*args):
    if avaible:
        if len(args) == 0:
            emb = discord.Embed(title=":robot: | –ü–æ–º–æ—â–Ω–∏–∫", description="**+help id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏** \n", color=Colour.gold())
            emb.add_field(name="1) —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", value="**hug, slap, casino, change_sex, lottery**", inline=False)
            emb.add_field(name="2) –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∫–∏", value="**shop , buy**", inline=False)
            emb.add_field(name="3) –∫–æ–∏–Ω—ã", value="**balance, transfer**", inline=False)
            emb.add_field(name="4) —Ä–æ–ª–∏", value="**edit_custom_role, check_subscriptions**", inline=False)
            emb.add_field(name="5) –æ—Å—Ç–∞–ª—å–Ω–æ–µ", value="**info, ping, stats, question, tic_tac_toe,chess**", inline=False)
            await ctx.send(embed  = emb)
        else:
            if args[0] == '1':
                emb = discord.Embed(title=":robot: | –ü–æ–º–æ—â–Ω–∏–∫", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è \n", color=Colour.gold())
                emb.add_field(name="hug - –æ–±–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ", value="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: id –∏–ª–∏ –ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—è—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å "+ str(use_shop['hug']), inline=False)
                emb.add_field(name="slap - –¥–∞—Ç—å –ª—è—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ", value="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: id –∏–ª–∏ –ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç—É –¥–∞—Ç—å –ª—è—â, —Å—Ç–æ–∏–º–æ—Å—Ç—å "+ str(use_shop['kick']), inline=False)
                emb.add_field(name="casino - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —É–¥–∞—á—É —Å–¥–µ–ª–∞–≤ —Å—Ç–∞–≤–∫—É ", value="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: amount - —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0", inline=False)
                emb.add_field(name="change_sex - —Å–º–µ–Ω–∏—Ç—å –ø–æ–ª", value='–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ men –∏–ª–∏ women', inline=False)
                emb.add_field(name="lottery  - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ   ", value=" –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–µ—Ä–µ–π", inline=False)
                await ctx.send(embed  = emb)
            
            elif args[0] == '2':
                emb = discord.Embed(title=":robot: | –ü–æ–º–æ—â–Ω–∏–∫", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∫–∏ \n", color=Colour.gold())
                emb.add_field(name="shop  - –º–∞–≥–∞–∑–∏–Ω  ", value="–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ", inline=False)
                emb.add_field(name="buy  - –∫—É–ø–∏—Ç—å   ", value="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: id —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —Å–æ–≤–µ—Ä—à–∞–µ—Ç –ø–æ–∫—É–ø–∫—É ", inline=False)
                await ctx.send(embed  = emb)
        
            elif args[0] == '3':
                emb = discord.Embed(title=":robot: | –ü–æ–º–æ—â–Ω–∏–∫", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–∏–Ω—ã \n", color=Colour.gold())
                emb.add_field(name="balance  - –±–∞–ª–∞–Ω—Å  ", value="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ–π –±–∞–ª–∞–Ω—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–∏—á–µ–≥–æ —Ç–æ –≤—ã–≤–µ–¥–∏—Ç—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å", inline=False)
                emb.add_field(name="transfer  - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏   ", value="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç: id –∏–ª–∏ –ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã, –∞ —Ç–∞–∫–∂–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ , –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ —Å –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π ", inline=False)
                await ctx.send(embed  = emb)
                    
            elif args[0] == '4':
                emb = discord.Embed(title=":robot: | –ü–æ–º–æ—â–Ω–∏–∫", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–æ–ª–∏ \n", color=Colour.gold())
                emb.add_field(name="edit_custom_role  - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏  ", value="–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å, –∫—É–ø–∏—Ç—å –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", inline=False)
                emb.add_field(name="check_subscriptions  - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞—Å—Ç–æ–º–Ω–æ–π/—Å–∞–± —Ä–æ–ª–µ–π   ", value="–í—ã–≤–æ–¥–∏—Ç –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞—à–µ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏ –∏ —Å–∞–±–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å  ", inline=False)
                await ctx.send(embed  = emb)
            
            elif args[0] == '5':
                emb = discord.Embed(title=":robot: | –ü–æ–º–æ—â–Ω–∏–∫", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–µ \n", color=Colour.gold())
                emb.add_field(name="info  - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ   ", value="–í–æ–∑—Ä–∞—â–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ", inline=False)
                emb.add_field(name="ping  - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É —Å –±–æ—Ç–æ–º ", value="–í—ã–≤–æ–¥–∏—Ç –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –º–∏–ª–∏—Å–∏–∫—É–Ω–¥–∞—Ö  ", inline=False)
                emb.add_field(name="stats  - –Ω–µ–º–Ω–æ–≥–æ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ", value="–í—ã–≤–æ–¥–∏—Ç –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ  ", inline=False)
                emb.add_field(name="question  - —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å ", value="–í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤e—Ç–∞ –Ω–∞ –Ω–µ–≥–æ. C–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", inline=False)
                emb.add_field(name="tic_tac_toe  - –∏–≥—Ä–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ —Å –±–æ—Ç–æ–º ", value="–í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤e—Ç–∞ –Ω–∞ –Ω–µ–≥–æ. C–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", inline=False)
                emb.add_field(name="chess  - –∏–≥—Ä–∞ –≤ —à–∞—Ö–º–∞—Ç—ã —Å –±–æ—Ç–æ–º ", value="–≤—ã–≤–æ–¥–∏—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏—è (–æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–∞ –∫—Ä–∞—é –ø–æ–ª—è)", inline=False)
                await ctx.send(embed  = emb)

            else:
                await ctx.send(embed = stuff.embed("–ù–µ –Ω–∞–π–¥–µ–Ω id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ",Colour.red(),'–ü–æ–º–æ—â–Ω–∏–∫'))



@bot.command(pass_context= True) 
async def info(ctx):
    if avaible:
        await ctx.send(embed = stuff.embed('–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ python3.8.5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ilesik#0358. –ï—Å–ª–∏ –∏–º–µ–µ—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ  —Å–æ–æ–±—â–µ–Ω–∏—è\n\n –û—Ç–¥–µ–ª—å–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Raizyr#1337 –∑–∞ –ø–æ–º–æ—â—å',emoji=':wheelchair: '))


@bot.command(pass_context= True)
async def ping(ctx):
    if avaible:
        t = time.time()
        m =await ctx.send(embed = stuff.embed('pong üèì',Colour.dark_grey()))
        await m.edit( embed = stuff.embed('ping: '+ str(int((time.time() - t )*1000))+' ms',Colour.blue(),emoji=':ping_pong: '))


@bot.command(pass_context= True)
async def question(ctx):
    from __main__ import bot
    question = json.loads(requests.get('https://opentdb.com/api.php?amount=1').text)['results']
    if len(question) == 0:
        question = json.loads(requests.get('https://opentdb.com/api.php?amount=1').text)['results']
        if len(question) == 0 :
            await ctx.send(embed = stuff.embed('Error to get a question for you',Colour.red()))
            return
    question = question[0]
    question['question'] = html.unescape(question['question'])
    question['correct_answer'] = html.unescape(question['correct_answer'])
    posible_answers = question['incorrect_answers']
    for i in range(len(posible_answers)):
        posible_answers[i] = html.unescape(posible_answers[i])

    posible_answers.append(question['correct_answer'])
    random.shuffle(posible_answers)



    await ctx.send(embed = Embed(title = 'QUIZ (you have 10 seconds for answer)',description = question['question'],color = Colour.gold()
    ),components = [Button(style=ButtonStyle.blue, label=i, id = str(ctx.author.id)+i) for i in posible_answers])

    try:
        while True:
            response = await bot.wait_for("button_click",timeout=10.0)
            if ctx.author == response.user and ctx.channel == response.channel and response.component.label in posible_answers and str(ctx.author.id) in response.component.id : 
                break
    except:
        await ctx.send(embed = stuff.embed('Correct answer was: '+question['correct_answer'],Colour.red(),'TIME OUT'))
        return

    await response.respond(type = 7)
    if response.component.label == question['correct_answer']:
        await ctx.send(embed = stuff.embed('The answer was: '+question['correct_answer'],Colour.green(),'Correct!'))
    else:
        await ctx.send(embed = stuff.embed('The answer was: '+question['correct_answer'],Colour.red(),'Incorrect!'))


@bot.command(pass_context= True)
async def tic_tac_toe(ctx):
    def buttons():
       return [[Button(id = json.dumps([i,b]) ,style=(ButtonStyle.blue if field.get_map()[i][b] =='-' else (ButtonStyle.green if field.get_map()[i][b] == 'x' else ButtonStyle.red)), label=field.get_map()[i][b]) for b in range(len(field.get_map()[i]))] for i in range(3)]

    # generate game and bot 
    field = ttt.Field(clear_place_sign = '-')
    ttt_bot = ttt.Bot(field)
    if not field.is_payer_turn():
        ttt_bot.make_move()
    message = await ctx.send(embed = Embed(title = '–ò–≥—Ä–∞ "–∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏" (30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥)',color = Colour.gold()),
    components = buttons())
    try:
        while True:
            response = await bot.wait_for("button_click",timeout = 30.0)
            if response.component.label != '-':
                await response.respond(type = 4,embed = stuff.embed('–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ',Colour.red(),'–û—à–∏–±–∫–∞ —Ö–æ–¥–∞'))
            elif ctx.author == response.user and ctx.channel == response.channel:
                await response.respond(type = 7)
                ch = field.make_move(json.loads(response.component.id))
                if ch:
                    await message.edit(components = buttons())
                    if ch == 'draw':
                        await ctx.send(embed = stuff.embed('–ù–∏—á—å—è',Colour.green(),'–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–æ—Ç–∞'))
                        return
                    await ctx.send(embed = stuff.embed('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!!',Colour.green(),'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏'))
                    return
                ch = ttt_bot.make_move()
                if ch:
                    await message.edit(components = buttons())
                    if ch == 'draw':
                        await ctx.send(embed = stuff.embed('–ù–∏—á—å—è',Colour.green(),'–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–æ—Ç–∞'))
                        return
                    await ctx.send(embed = stuff.embed('–°–æ–∂–∞–ª–µ–µ–º',Colour.red(),'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'))
                    return
                await message.edit(components = buttons())   
    except:
        await ctx.send(embed = stuff.embed('–ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑-–∑–∞ –≤–∞—à–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',Colour.red(),'–í—Ä–µ–º—è –≤—ã—à–ª–æ'))


@bot.command(pass_context= True)
async def stats(ctx):
    if avaible:
        all_user_data  = db.tuple_to_array(db.select(['*'],'servers_user_data',['server_id','user_id'],[str(ctx.guild.id),str(ctx.author.id)],['=','='],['AND']))[0][4::] # [kicks_give,kicks_take,hugs_give,hugs_take,money_spent_all_time,casino_times_played,casino_win_times,casino_lose_times,casino_money_win,casino_money_lose,transfer_money_give_at_all,transfer_money_take_at_all,transfer_give_times,transfer_take_times, amount_of_bought_products, money_spent_in_shop,is_female,money_spent_in_lottery,lottery_played_times,lottery_win_times,lottery_lose_times]
        #print(all_user_data)
        emb = discord.Embed(title=":scroll: | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", description="–≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ \n", color=Colour.gold())
        emb.add_field(name=":peace: | –£–¥–∞—Ä—ã/–æ–±–Ω–∏–º–∞—à–∫–∏", value="–í—ã —É–¥–∞—Ä–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "+str(all_user_data[0])+" —Ä–∞–∑ \n–í—ã –±—ã–ª–∏ —É–¥–∞—Ä–µ–Ω—ã –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ "+str(all_user_data[1])+' —Ä–∞–∑ \n–í—ã –æ–±–Ω—è–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π '+str(all_user_data[2])+' —Ä–∞–∑ \n–í—ã –±—ã–ª–∏ –æ–±–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ '+str(all_user_data[3])+' —Ä–∞–∑\n', inline=False)
        emb.add_field(name = ":slot_machine: | –ö–∞–∑–∏–Ω–æ",value = '–í—ã —Å—ã–≥—Ä–∞–ª–∏ –≤ –∫–∞–∑–∏–Ω–æ '+str(all_user_data[5])+' —Ä–∞–∑\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –∫–∞–∑–∏–Ω–æ '+str(all_user_data[6])+' —Ä–∞–∑\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –∫–∞–∑–∏–Ω–æ '+str(all_user_data[7])+' —Ä–∞–∑\n–í–∞—à–∏ –≤—ã–∏–≥—Ä—ã—à–∏ –≤ —Å—É–º–º–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç '+str(all_user_data[8])+" –∫–æ–∏–Ω–æ–≤\n–í–∞—à –ø—Ä–æ–∏–≥—Ä—ã—à–∏ –≤ —Å—É–º–º–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç "+str(all_user_data[9])+' –∫–æ–∏–Ω–æ–≤\n',inline=False)
        emb.add_field(name = ':moneybag: | –ö–æ–∏–Ω—ã', value = '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è –≤—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏ '+str(all_user_data[4])+ ' –∫–æ–∏–Ω–æ–≤\n–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º '+str(all_user_data[10])+' –∫–æ–∏–Ω–æ–≤\n–í–∞–º –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª–∏ '+str(all_user_data[11])+' –∫–æ–∏–Ω–æ–≤\n–í—ã –ø–µ—Ä–µ—á—Å–ª—è–ª–∏ –∫–æ–∏–Ω—ã '+str(all_user_data[12])+' —Ä–∞–∑\n–í—ã –ø–æ–ª—É—á–∞–ª–∏ –∫–æ–∏–Ω—ã '+str(all_user_data[13])+' —Ä–∞–∑\n',inline=False)
        emb.add_field(name = ':shopping_cart: | –ú–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∫–∏', value = '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è –≤—ã –∫—É–ø–∏–ª–∏  '+str(all_user_data[14])+ ' —Ç–æ–≤–∞—Ä–æ–≤\n–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ '+str(all_user_data[15])+' –∫–æ–∏–Ω–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫–∏\n',inline=False)
        emb.add_field(name = ':game_die: | –õ–æ—Ç–µ—Ä–µ–∏', value = '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏  '+str(all_user_data[17])+ ' –∫–æ–∏–Ω–æ–≤ –Ω–∞ —É—á–∞—Å—Ç–∏–µ\n–í—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ '+str(all_user_data[18])+' —Ä–∞–∑\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ '+str(all_user_data[19])+' —Ä–∞–∑\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ '+str(all_user_data[20])+' —Ä–∞–∑\n',inline=False)
        await ctx.send(embed = emb)

@bot.command(pass_context= True)
async def chess(ctx):
    from __main__ import ch_engine
    board = ch.Board('7k/R2R4/8/8/8/8/5K2/8')

    letters = ['a','b','c','d','e','f','g','h']
                        
    emojis = {
        'B':883415614755045397,
        'b':883415614922838016,
        'K':883415619649806337,
        'k':883415619301687337,
        'N':883415619662413854,
        'n':883415619289112667,
        'P':883415619863740466,
        'p':883415619624632390,
        'Q':883415619679182898,
        'q':883415619633025104,
        'R':883415619343622176,
        'r':883415619733688320}

    def generate_buttons_moves(posible_moves,part2 = False):
        buttons = [[]]
        for i in posible_moves:
            k =str(board).replace(' ','').split('\n')
            k = (k[8-int(i[1])][letters.index(i[0])] if len(list(i)) == 2 else i[2].upper())
            if k != '.':
                buttons[-1].append(Button(id = i,label=(i if len(list(i)) == 2 else i[0:-1:1]),style=ButtonStyle.blue,emoji=bot.get_emoji(emojis[k])))
            else:
                buttons[-1].append(Button(id = i,label=(i if len(list(i)) == 2 else i[0:-1:1]),style=ButtonStyle.blue))
            if len(buttons[-1]) > 4:
                if  len(buttons) < 5:
                    buttons.append([])
                else:
                    if part2:
                        last_btn = buttons[-1][-1]
                        last_btn2 = buttons[-1][-2]
                        buttons = [[Button(id = 'back_move',style=ButtonStyle.grey,emoji= 'üîô'),last_btn,last_btn2]]
                    else:
                        buttons[-1] = buttons[-1][0:-1:1]
                        buttons[-1][-1] = Button(id = 'next',style=ButtonStyle.grey,emoji= '‚è©')
                        break

        if buttons[-1] == []:
            buttons = buttons[0:-1:1]
        if not part2:
            if (len(buttons) > 0 and len(buttons[-1]) > 4) or len(buttons) ==0:
                buttons.append([])
            buttons[-1].append(Button(id = 'back',style=ButtonStyle.red,emoji='üîô'))
        return buttons 

    def generate_buttons_choose_figure():
        buttons = [[]]
        str_board = str(board)
        x = 0
        y = 8
        for i in list(str_board):
            if i == ' ':
                continue

            if i == '\n':
                x = 0
                y -= 1
                continue

            if i !='.' and i.isupper():
                id = letters[x]+str(y)
                if  id in [str(i)[0:2] for i in board.legal_moves]:
                    buttons[-1].append(Button(id = id,style=ButtonStyle.blue,label=id,emoji= bot.get_emoji(emojis[i])))
                if len(buttons[-1]) > 4 :
                    buttons.append([])

            x+=1
        if len(buttons[-1]) == 0:
            buttons = buttons[0:-1:1]
        if (len(buttons) > 0 and len(buttons[-1])>4) or len(buttons) == 0:
            buttons.append([])
        buttons[-1].append(Button(id = 'exit',style=ButtonStyle.red,emoji='üö™'))
        return buttons

    async def make_img(selected_figure = '',posible_moves = []):
        path = './data/texturs/chess/'
        square_size = 125 #px
        img = Image.new('RGBA', Image.open(path+'board.png').size,(0, 0, 0, 0))
        img.paste(Image.open(path+'board.png'), (0,0,img.size[0],img.size[1]))

        if selected_figure:
            y = int(selected_figure[1])-1
            x = letters.index(selected_figure[0])
            sq = Image.open(path+'blue_square.png').convert("RGBA")
            sq.putalpha(128)
            img.paste(sq,(x*square_size+5,y*square_size),sq)

        for i in posible_moves:
            y = 9-int(i[1])-1
            x = letters.index(i[0])
            sq = Image.open(path+'green_square.png').convert("RGBA")
            sq.putalpha(128)
            img.paste(sq,(x*square_size+3,y*square_size-1),sq)


        str_board =  str(board).replace(' ','').split('\n')
        for i in range(len(str_board)):
            for b in range(len(list(str_board[i]))):
                if str_board[i][b] != '.':
                    p_img = Image.open(path + (str_board[i][b] if str_board[i][b].isupper() else str_board[i][b]+'1') +'.png')
                    img.paste(p_img,(b*square_size,i*square_size),p_img)

        with io.BytesIO() as image_binary:
            img.save(image_binary, 'PNG')
            image_binary.seek(0)
            m = await bot.get_channel(883373495260708954).send(file=discord.File(fp=image_binary, filename='image.png'))
            return m.attachments[0].url
        
    message = await ctx.send(embed = stuff.embed('–ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –¥—É–º–∞–µ—Ç'))
    emb = Embed(title = '–®–∞—Ö–º–∞—Ç—ã (2 –º–∏–Ω –Ω–∞ —Ö–æ–¥)',description = '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥')
    emb.set_image(url = await make_img())
    try:
        while True:

            emb = Embed(title = '–®–∞—Ö–º–∞—Ç—ã (2 –º–∏–Ω –Ω–∞ —Ö–æ–¥)',description = '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥')
            emb.set_image(url = await make_img())
            await message.edit(embed = emb,components = generate_buttons_choose_figure())

            t = int(time.time()+100)
            while True:
                try:
                    response = await bot.wait_for("button_click",timeout = t-time.time())
                except:
                    t = time.time()+20
                    await ctx.send(embed = stuff.embed('–û—Å—Ç–∞–ª–æ—Å—å 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ö–æ–¥–∞',Colour.gold(),'–í–Ω–∏–º–∞–Ω–∏–µ!!!',':exclamation:'))
                    response = await bot.wait_for("button_click",timeout = t - time.time())

                if ctx.author == response.user and response.message == message :
                    if response.component.id == 'exit':
                        await response.respond(type=7,embed = stuff.embed('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ'),components=[])
                        return

                    await response.respond(type=7,embed = stuff.embed('–ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –¥—É–º–∞–µ—Ç'),components=[])
                    break

            #get posible moves
            from_where = response.component.id
            posible_moves = [str(i)[2::] for i in board.legal_moves if str(i).startswith(from_where)]
            emb.description = '–≤—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ö–æ–¥–∏—Ç—å'
            emb.set_image(url = await make_img(response.component.id[0]+str(9-int(response.component.id[1])),posible_moves))
            await message.edit(embed = emb,components = generate_buttons_moves(posible_moves))
            
            t = int(time.time()+100)
            while True:
                try:
                    response = await bot.wait_for("button_click",timeout = t-time.time())
                except:
                    t = time.time()+20
                    await ctx.send(embed = stuff.embed('–û—Å—Ç–∞–ª–æ—Å—å 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ö–æ–¥–∞',Colour.gold(),'–í–Ω–∏–º–∞–Ω–∏–µ!!!',':exclamation:'))
                    response = await bot.wait_for("button_click",timeout = t - time.time())

                if ctx.author == response.user and response.message == message :
                    if response.component.id == 'next':
                        t = int(time.time()+120)
                        await response.respond(type=7,components = generate_buttons_moves(posible_moves,True))
                    elif response.component.id == 'back_move':
                        t = int(time.time()+120)
                        await response.respond(type=7,components = generate_buttons_moves(posible_moves))
                    else:
                        break
            
            await response.respond(type=7,embed = stuff.embed('–ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –¥—É–º–∞–µ—Ç'),components=[])
            if response.component.id == 'back':
                continue
            
            

            #make move
            
            board.push(ch.Move.from_uci(from_where[0]+from_where[1]+response.component.id))
            if  board.is_game_over():
                break
            result = await ch_engine.play(board, ch.engine.Limit(time=0.1))
            board.push(result.move)
            if  board.is_game_over():
                break

        if board.outcome().termination._value_ == 3: #draw
            emb = stuff.embed(title = '–ù–∏—á—å—è',text = '–≠—Ç–æ –±—ã–ª–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è –∏–≥—Ä–∞!!',color=Colour.gold(),emoji = ':woozy_face: ')
        elif not board.outcome().winner: #black
            emb = stuff.embed(title = '–ü—Ä–æ–∏–≥—Ä—ã—à',text= '–í—ã –≥–ª—É–ø—ã, –∏–ª–∏ –±–æ—Ç —Å–ª–∏—à–∫–æ–º —É–º–µ–Ω, —Å–∫–æ—Ä–µ–µ –≤—Ç–æ—Ä–æ–µ xD',color=Colour.red())
        elif board.outcome().winner: #white
            emb = stuff.embed(title = '–í—ã–∏–≥—Ä—ã—à',text = '–î–∞ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ',color=Colour.green())
        emb.set_image(url = await make_img())
        await message.edit(embed = emb,components = [])
    except TimeoutError:
        await ctx.send(embed = stuff.embed('–í—ã –¥—É–º–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ',Colour.red(),'–í—Ä–µ–º—è –≤—ã—à–ª–æ'))
        return

